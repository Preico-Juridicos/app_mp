<%- include('partials/header') %>
    <div class="row">
        <div class="col-12"
            style="align-self: stretch;display: flex;flex-direction: column;justify-content: center;align-items: center;">
            <canvas id="<%= canvas.name %>-<%= canvas.id %>" width="<%= canvas.width %>"
                height="<%= canvas.height %>"></canvas>
        </div>
    </div>




    <div class="legend">
        <%- include('../components/floating-menuv2') %>

    </div>

    <!-- Modal para seleccionar patrocinador -->
    <div class="modal fade" id="sponsorModal" tabindex="-1" aria-labelledby="sponsorModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="sponsorModalLabel">Seleccionar Patrocinador</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <select id="sponsorSelect" class="form-select">
                        <% sponsors.forEach(sponsor=> { %>
                            <option value="<%= sponsor.id %>">
                                <%= sponsor.name %>
                            </option>
                            <% }) %>
                    </select>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                    <button type="button" class="btn btn-danger" id="removeSponsor">Eliminar</button>
                    <button type="button" class="btn btn-primary" id="saveSponsor">Guardar</button>
                </div>
            </div>
        </div>
    </div>


    <script src="/fabric/fabric.min.js"></script>
    <script>
        const canvas = new fabric.Canvas('<%= canvas.name %>-<%= canvas.id %>');
        const canvaID = '<%= canvas.id %>';
        const routeType = '<%= type %>';
        $(document).ready(function () {
            const canvaData = JSON.parse('<%= canvas.canvaData %>'.replace(/&#34;/g, '"'));
            //console.log(canvaData);
            canvas.loadFromJSON(canvaData, () => {

                var posi = JSON.parse('<%- JSON.stringify(positions).replace(/\\/g, '\\\\') %>');

                var canvaObjects = []
                posi.forEach(position => {
                    // Parsear position_data dentro de cada objeto position
                    position.position_data = JSON.parse(position.position_data);
                    position.position_data.id = position.id;
                    canvaObjects.push(position.position_data);
                });

                fabric.util.enlivenObjects(canvaObjects, function (objects) {
                    objects.forEach(function (o) {
                        console.log(o)
                        canvas.add(o);
                    });
                });
                canvas.renderAll();


            })


            // Evento para detener el modo de dibujo libre al hacer clic en otro botÃ³n o en el lienzo
            canvas.on('mouse:up', () => {
                if (canvas.isDrawingMode) {
                    canvas.isDrawingMode = false;
                    let paths = canvas.getObjects().filter(obj => obj.type === 'path');
                    let ultimoPath = paths.reduce((ultimo, actual) => {
                        return (canvas.getObjects().indexOf(actual) > canvas.getObjects().indexOf(ultimo)) ? actual : ultimo;
                    });
                    if (ultimoPath) {
                        ultimoPath.set({
                            selectable: true,
                            hasControls: true,
                            centeredRotation: true,
                            fill: bgcolor,
                        });
                        // console.log(`Forma libre agregada. Puntos:`, ultimoPath.path);
                    }
                } else {
                    canvas.forEachObject(obj => {
                        clearInterval(obj.brilloIntervalo);
                        //obj.stop();
                        //console.log(obj);
                        //obj.set('fill', obj.originalColor);
                    });
                    canvas.renderAll();
                }
            });

            var objSelected = {};
            canvas.on('selection:created', (e) => {
                if (e.selected && e.selected.length == 1) {
                    objSelected = JSON.stringify(e.selected[0]);
                }
            });

            canvas.on('selection:cleared', (e) => {
                if (e.deselected && e.deselected.length == 1) {
                    position_id = e.deselected[0].id;
                    $.ajax({
                        url: '/update-position',
                        method: 'POST',
                        data: {
                            id: position_id,
                            position_data_new: JSON.stringify(e.deselected[0]),
                        },
                        success: function (response) {
                            //console.log(JSON.stringify(e.deselected[0]));
                            objSelected = {}
                        },
                        error: function (error) {
                            console.error("Error al modificar el objeto " + position_id + " del canva " + canvaID, error);
                        }
                    });

                }
            });

            // Evento para eliminar un objeto al presionar la tecla "Delete"
            $(document).on('keydown', (e) => {
                if (e.key === 'Delete') {
                    const activeObject = canvas.getActiveObject();
                    if (activeObject) {
                        canvas.remove(activeObject);
                        //console.log(activeObject.id);
                        $.ajax({
                            url: '/remove-position-id',
                            method: 'POST',
                            data: {
                                id: activeObject.id,
                            },
                            success: function (response) {
                                //location.reload();
                            },
                            error: function (error) {
                                console.error("Error al eliminar el objeto del canva " + canvaID, error);
                            }
                        });
                    }
                }
            });
        });


        function addFreeShape(color, bgcolor) {
            // Utiliza la herramienta de dibujo libre de Fabric.js
            canvas.isDrawingMode = true;
            canvas.freeDrawingBrush.width = 2;
            canvas.freeDrawingBrush.color = color;
        };

        function addShape(shapeType, color, bgcolor) {
            let shape;
            let sectionID = $('#shapeSelector').data('section');

            switch (shapeType) {
                case 'line':
                    shape = new fabric.Line([50, 100, 200, 200], {
                        stroke: color,
                        strokeWidth: 2
                    });
                    break;
                case 'oval':
                    shape = new fabric.Ellipse({
                        left: 500,
                        top: 100,
                        rx: 50,
                        ry: 30,
                        fill: bgcolor,
                        stroke: color,
                        strokeWidth: 2
                    });
                    break;
                case 'rect':
                    shape = new fabric.Rect({
                        left: 500,
                        top: 100,
                        fill: bgcolor,
                        width: 150,
                        height: 100,
                        stroke: color,
                        strokeWidth: 2
                    });
                    break;
                case 'triangle':
                    shape = new fabric.Triangle({
                        left: 500,
                        top: 100,
                        fill: bgcolor,
                        width: 100,
                        height: 100,
                        stroke: color,
                        strokeWidth: 2
                    });
                    break;
                case 'diamond':
                    shape = new fabric.Polygon([
                        { x: 200, y: 10 },
                        { x: 250, y: 50 },
                        { x: 200, y: 90 },
                        { x: 150, y: 50 }
                    ], {
                        fill: bgcolor,
                        stroke: color,
                        strokeWidth: 2
                    });
                    break;
                case 'pentagon':
                    shape = new fabric.Polygon([
                        { x: 300, y: 10 },
                        { x: 350, y: 50 },
                        { x: 325, y: 100 },
                        { x: 275, y: 100 },
                        { x: 250, y: 50 }
                    ], {
                        fill: bgcolor,
                        stroke: color,
                        strokeWidth: 2
                    });
                    break;
                case 'hexagon':
                    shape = new fabric.Polygon([
                        { x: 300, y: 50 },
                        { x: 350, y: 50 },
                        { x: 375, y: 100 },
                        { x: 350, y: 150 },
                        { x: 300, y: 150 },
                        { x: 275, y: 100 }
                    ], {
                        fill: bgcolor,
                        stroke: color,
                        strokeWidth: 2
                    });
                    break;
                case 'star':
                    shape = new fabric.Polygon([
                        { x: 50, y: 0 },
                        { x: 60, y: 30 },
                        { x: 100, y: 30 },
                        { x: 70, y: 50 },
                        { x: 80, y: 80 },
                        { x: 50, y: 60 },
                        { x: 20, y: 80 },
                        { x: 30, y: 50 },
                        { x: 0, y: 30 },
                        { x: 40, y: 30 }
                    ], {
                        left: 500,
                        top: 100,
                        fill: bgcolor,
                        stroke: color,
                        strokeWidth: 2
                    });
                    break;
                case 'arrow':
                    shape = new fabric.Polygon([
                        { x: 0, y: 0 },
                        { x: 100, y: 50 },
                        { x: 0, y: 100 },
                        { x: 20, y: 50 }
                    ], {
                        left: 500,
                        top: 100,
                        fill: bgcolor,
                        stroke: color,
                        strokeWidth: 2
                    });
                    break;
                case 'speechBubble':
                    shape = new fabric.Path('M 0 0 L 200 0 Q 230 0, 230 30 L 230 70 Q 230 100, 200 100 L 100 100 L 50 130 L 75 100 L 0 100 Q -30 100, -30 70 L -30 30 Q -30 0, 0 0 z', {
                        left: 500,
                        top: 100,
                        fill: bgcolor,
                        stroke: color,
                        strokeWidth: 2,
                        includeDefaultValues: true
                    });
                    break;
            }


            canvas.add(shape);



            $.ajax({
                url: '/add-position',
                method: 'POST',
                data: {
                    id_canva: canvaID,
                    position_data: JSON.stringify(shape),
                    section_color: color,
                    section_id: sectionID,
                },
                success: function (response) {
                    location.reload();
                },
                error: function (error) {
                    console.error("Error al aÃ±adir el canva " + canvaID, error);
                }
            });
        }
    </script>

    <%- include('partials/footer') %>