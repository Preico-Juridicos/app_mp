<%- include('partials/header') %>
    <div class="row">
        <div class="col-12"
            style="align-self: stretch;display: flex;flex-direction: column;justify-content: center;align-items: center;">
            <canvas id="<%= canvas.name %>-<%= canvas.id %>" width="<%= canvas.width %>"
                height="<%= canvas.height %>"></canvas>
        </div>
    </div>




    <div class="legend">
        <%- include('../components/floating-menuv2') %>
    </div>

    <!-- Modal para seleccionar patrocinador -->
    <div class="modal fade" id="sponsorModal" tabindex="-1" aria-labelledby="sponsorModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="sponsorModalLabel">Seleccionar Patrocinador</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <select id="sponsorSelect" class="form-select">
                        <% sponsors.forEach(sponsor=> { %>
                            <option value="<%= sponsor.id %>">
                                <%= sponsor.name %>
                            </option>
                            <% }) %>
                    </select>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                    <button type="button" class="btn btn-danger" id="removeSponsor">Eliminar</button>
                    <button type="button" class="btn btn-primary" id="saveSponsor">Guardar</button>
                </div>
            </div>
        </div>
    </div>


    <script src="/fabric/fabric.min.js"></script>
    <script>
        const canvas = new fabric.Canvas('<%= canvas.name %>-<%= canvas.id %>');
        const canvaID = '<%= canvas.id %>';
        $(document).ready(function () {
            const canvaData = JSON.parse('<%= canvas.canvaData %>'.replace(/&#34;/g, '"'));
            //console.log(canvaData);
            canvas.loadFromJSON(canvaData, () => {
                canvas.renderAll();
                <!-- //console.log(canvas.item(0).name); -->
                //console.log(canvaID);
            })


            // Evento para detener el modo de dibujo libre al hacer clic en otro botÃ³n o en el lienzo
            canvas.on('mouse:up', () => {
                if (canvas.isDrawingMode) {
                    canvas.isDrawingMode = false;
                    let paths = canvas.getObjects().filter(obj => obj.type === 'path');
                    let ultimoPath = paths.reduce((ultimo, actual) => {
                        return (canvas.getObjects().indexOf(actual) > canvas.getObjects().indexOf(ultimo)) ? actual : ultimo;
                    });
                    if (ultimoPath) {
                        ultimoPath.set({
                            selectable: true,
                            hasControls: true,
                            centeredRotation: true,
                            fill: bgcolor,
                        });
                        // console.log(`Forma libre agregada. Puntos:`, ultimoPath.path);
                    }
                } else {
                    canvas.forEachObject(obj => {
                        clearInterval(obj.brilloIntervalo);
                        //obj.stop();
                        //console.log(obj);
                        //obj.set('fill', obj.originalColor);
                    });
                    canvas.renderAll();
                }
            });

            canvas.on('selection:cleared', (e) => {
                if (e.deselected) {
                    canvasObject = JSON.stringify(canvas.toObject());
                    //console.log(canvas.toObject());
                    //console.log(canvasObject);


                    $.ajax({
                        url: '/update-canvadata',
                        method: 'POST',
                        data: {
                            id: canvaID,
                            data: canvasObject,
                        },
                        success: function (response) {
                            //location.reload();
                        },
                        error: function (error) {
                            console.error("Error al actualizar el canva " + canvaID, error);
                        }
                    });

                }
            });




            // Evento para eliminar un objeto al presionar la tecla "Delete"
            $(document).on('keydown', (e) => {
                if (e.key === 'Delete') {
                    const activeObject = canvas.getActiveObject();
                    if (activeObject) {
                        canvas.remove(activeObject);
                        color = rgbaToHex(activeObject.get('fill'),false).slice(1);
                        console.log(rgbaToHex(color,false).slice(1));
                        canvasObject = JSON.stringify(canvas.toObject());


                        $.ajax({
                            url: '/update-canvadata',
                            method: 'POST',
                            data: {
                                id: canvaID,
                                data: canvasObject,
                            },
                            success: function (response) {
                                //location.reload();
                            },
                            error: function (error) {
                                console.error("Error al actualizar el canva " + canvaID, error);
                            }
                        });
                       // $.ajax({
                       //     url: '/remove-position',
                       //     method: 'POST',
                       //     data: {
                       //         id_canva: canvaID,
                       //         id_position: canvaID+'-'+color,
                       //         section_color: color,
                       //     },
                       //     success: function (response) {
                       //         //location.reload();
                       //     },
                       //     error: function (error) {
                       //         console.error("Error al actualizar el canva " + canvaID, error);
                       //     }
                       // });
                    }
                }
            });





            // $('#canvaToJSON').on('click', function () {
            //     canvasObject = JSON.stringify(canvas.toObject());
            //     console.log(canvas.toObject());
            //     console.log(canvasObject);
            // })
            //
            // $('#canvaFromJSON').on('click', function () {
            //     canvas.loadFromJSON(canvasObject, () => {
            //         canvas.renderAll();
            //
            //         console.log(canvas.item(0).name);
            //     })
            // })
            //
            // $('#canvaClear').on('click', function () {
            //     canvas.clear();
            // })
        });


        function addFreeShape(color, bgcolor) {
            // Utiliza la herramienta de dibujo libre de Fabric.js
            canvas.isDrawingMode = true;
            canvas.freeDrawingBrush.width = 2;
            canvas.freeDrawingBrush.color = color;
        };

        function addShape(shapeType, color, bgcolor) {
            let shape;
            switch (shapeType) {
                case 'line':
                    shape = new fabric.Line([50, 100, 200, 200], {
                        stroke: color,
                        strokeWidth: 2
                    });
                    break;
                case 'oval':
                    shape = new fabric.Ellipse({
                        left: 500,
                        top: 100,
                        rx: 50,
                        ry: 30,
                        fill: bgcolor,
                        stroke: color,
                        strokeWidth: 2
                    });
                    break;
                case 'rect':
                    shape = new fabric.Rect({
                        left: 500,
                        top: 100,
                        fill: bgcolor,
                        width: 150,
                        height: 100,
                        stroke: color,
                        strokeWidth: 2
                    });
                    break;
                case 'triangle':
                    shape = new fabric.Triangle({
                        left: 500,
                        top: 100,
                        fill: bgcolor,
                        width: 100,
                        height: 100,
                        stroke: color,
                        strokeWidth: 2
                    });
                    break;
                case 'diamond':
                    shape = new fabric.Polygon([
                        { x: 200, y: 10 },
                        { x: 250, y: 50 },
                        { x: 200, y: 90 },
                        { x: 150, y: 50 }
                    ], {
                        fill: bgcolor,
                        stroke: color,
                        strokeWidth: 2
                    });
                    break;
                case 'pentagon':
                    shape = new fabric.Polygon([
                        { x: 300, y: 10 },
                        { x: 350, y: 50 },
                        { x: 325, y: 100 },
                        { x: 275, y: 100 },
                        { x: 250, y: 50 }
                    ], {
                        fill: bgcolor,
                        stroke: color,
                        strokeWidth: 2
                    });
                    break;
                case 'hexagon':
                    shape = new fabric.Polygon([
                        { x: 300, y: 50 },
                        { x: 350, y: 50 },
                        { x: 375, y: 100 },
                        { x: 350, y: 150 },
                        { x: 300, y: 150 },
                        { x: 275, y: 100 }
                    ], {
                        fill: bgcolor,
                        stroke: color,
                        strokeWidth: 2
                    });
                    break;
                case 'star':
                    shape = new fabric.Polygon([
                        { x: 50, y: 0 },
                        { x: 60, y: 30 },
                        { x: 100, y: 30 },
                        { x: 70, y: 50 },
                        { x: 80, y: 80 },
                        { x: 50, y: 60 },
                        { x: 20, y: 80 },
                        { x: 30, y: 50 },
                        { x: 0, y: 30 },
                        { x: 40, y: 30 }
                    ], {
                        left: 500,
                        top: 100,
                        fill: bgcolor,
                        stroke: color,
                        strokeWidth: 2
                    });
                    break;
                case 'arrow':
                    shape = new fabric.Polygon([
                        { x: 0, y: 0 },
                        { x: 100, y: 50 },
                        { x: 0, y: 100 },
                        { x: 20, y: 50 }
                    ], {
                        left: 500,
                        top: 100,
                        fill: bgcolor,
                        stroke: color,
                        strokeWidth: 2
                    });
                    break;
                case 'speechBubble':
                    shape = new fabric.Path('M 0 0 L 200 0 Q 230 0, 230 30 L 230 70 Q 230 100, 200 100 L 100 100 L 50 130 L 75 100 L 0 100 Q -30 100, -30 70 L -30 30 Q -30 0, 0 0 z', {
                        left: 500,
                        top: 100,
                        fill: bgcolor,
                        stroke: color,
                        strokeWidth: 2,
                        includeDefaultValues: true
                    });
                    break;
            }

            // AÃ±adir un evento para mostrar las coordenadas del Ã¡rea cuando se deselecciona
            //shape.on('deselected', () => {
            //    // Almacenar detalles del rectÃ¡ngulo para recrear
            //    //console.log(`Forma deseleccionada. Nueva ubicaciÃ³n: Left=${shape.left}, Top=${shape.top}`);
            //    canvasObject = JSON.stringify(canvas.toObject());
            //    console.log(canvas.toObject());
            //    console.log(canvasObject);
            //
            //
            //    $.ajax({
            //        url: '/update-canvadata',
            //        method: 'POST',
            //        data: {
            //            id: canvaID,
            //            data: canvasObject,
            //        },
            //        success: function (response) {
            //            //location.reload();
            //        },
            //        error: function (error) {
            //            console.error("Error al actualizar el canva " + canvaID, error);
            //        }
            //    });
            //
            //});


            //shape.set('originalColor', {
            //    fill: shape.get('fill')
            //});
            //shape.addClass('test');
            canvas.add(shape);
            console.log(color)
            console.log(bgcolor)



            $.ajax({
                url: '/update-canvadata',
                method: 'POST',
                data: {
                    id: canvaID,
                    data: JSON.stringify(canvas.toObject()),
                },
                success: function (response) {
                    //location.reload();
                },
                error: function (error) {
                    console.error("Error al actualizar el canva " + canvaID, error);
                }
            });
            //$.ajax({
            //    url: '/add-position',
            //    method: 'POST',
            //    data: {
            //        id_canva: canvaID,
            //        id_position: canvaID+'-'+color,
            //        section_color: color,
            //    },
            //    success: function (response) {
            //        //location.reload();
            //    },
            //    error: function (error) {
            //        console.error("Error al actualizar el canva " + canvaID, error);
            //    }
            //});
        }
    </script>

    <%- include('partials/footer') %>